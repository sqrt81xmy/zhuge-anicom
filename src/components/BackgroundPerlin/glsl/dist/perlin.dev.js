"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var Perlin = '#ifdef GL_ES\n' + 'precision mediump float;\n' + '#endif\n' +
/*glsl*/
" \n//\n// GLSL textureless classic 3D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2024-11-07\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\nvarying vec2 vUv;//receive variable from vertex\nuniform float uTime;\nuniform vec3 uHighColor;\nuniform vec3 uLowColor; \nuniform vec3 uColor1;\nuniform vec3 uColor2;\nuniform vec3 uColor3;\nuniform vec3 uColor4;\nuniform vec3 uColor5;\nuniform vec3 uColor6;\nuniform vec3 uColor7;\nuniform vec3 uColor8;\nuniform vec3 uColor9;\nuniform vec3 uColor10;\nuniform vec3 uColor0;\nuniform sampler2D uDisplacementTexture;\n\n\nvec3 mod289(vec3 x)\n{\n return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n vec3 Pi0 = floor(P); // Integer part for indexing\n vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n Pi0 = mod289(Pi0);\n Pi1 = mod289(Pi1);\n vec3 Pf0 = fract(P); // Fractional part for interpolation\n vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n vec4 iy = vec4(Pi0.yy, Pi1.yy);\n vec4 iz0 = Pi0.zzzz;\n vec4 iz1 = Pi1.zzzz;\n\n vec4 ixy = permute(permute(ix) + iy);\n vec4 ixy0 = permute(ixy + iz0);\n vec4 ixy1 = permute(ixy + iz1);\n\n vec4 gx0 = ixy0 * (1.0 / 7.0);\n vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n gx0 = fract(gx0);\n vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n vec4 sz0 = step(gz0, vec4(0.0));\n gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n vec4 gx1 = ixy1 * (1.0 / 7.0);\n vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n gx1 = fract(gx1);\n vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n vec4 sz1 = step(gz1, vec4(0.0));\n gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n\n float n000 = norm0.x * dot(g000, Pf0);\n float n010 = norm0.y * dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n float n100 = norm0.z * dot(g100, vec3(Pf1.x, Pf0.yz));\n float n110 = norm0.w * dot(g110, vec3(Pf1.xy, Pf0.z));\n float n001 = norm1.x * dot(g001, vec3(Pf0.xy, Pf1.z));\n float n011 = norm1.y * dot(g011, vec3(Pf0.x, Pf1.yz));\n float n101 = norm1.z * dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n float n111 = norm1.w * dot(g111, Pf1);\n\n vec3 fade_xyz = fade(Pf0);\n vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n return 2.2 * n_xyz;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n Pi0 = mod289(Pi0);\n Pi1 = mod289(Pi1);\n vec3 Pf0 = fract(P); // Fractional part for interpolation\n vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n vec4 iy = vec4(Pi0.yy, Pi1.yy);\n vec4 iz0 = Pi0.zzzz;\n vec4 iz1 = Pi1.zzzz;\n\n vec4 ixy = permute(permute(ix) + iy);\n vec4 ixy0 = permute(ixy + iz0);\n vec4 ixy1 = permute(ixy + iz1);\n\n vec4 gx0 = ixy0 * (1.0 / 7.0);\n vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n gx0 = fract(gx0);\n vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n vec4 sz0 = step(gz0, vec4(0.0));\n gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n vec4 gx1 = ixy1 * (1.0 / 7.0);\n vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n gx1 = fract(gx1);\n vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n vec4 sz1 = step(gz1, vec4(0.0));\n gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n\n float n000 = norm0.x * dot(g000, Pf0);\n float n010 = norm0.y * dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n float n100 = norm0.z * dot(g100, vec3(Pf1.x, Pf0.yz));\n float n110 = norm0.w * dot(g110, vec3(Pf1.xy, Pf0.z));\n float n001 = norm1.x * dot(g001, vec3(Pf0.xy, Pf1.z));\n float n011 = norm1.y * dot(g011, vec3(Pf0.x, Pf1.yz));\n float n101 = norm1.z * dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n float n111 = norm1.w * dot(g111, Pf1);\n\n vec3 fade_xyz = fade(Pf0);\n vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n return 2.2 * n_xyz;\n}\n\n// demo code:\nfloat color(vec2 xy) {\n   float iTime = uTime;\n  return cnoise(vec3(1.5*xy, 0.3*iTime)); }\nvoid main() {\n   vec2 p = (vUv.xy) * 2.0 - 1.0;\n\n   vec3 xyz = vec3(p, 0);\n\n   vec2 step = vec2(1.3, 1.7);\n   float n = color(xyz.xy);\n   n += 0.5 * color(xyz.xy * 2.0 - step);\n   // n += 0.25 * color(xyz.xy * 4.0 - 2.0 * step);\n   // n += 0.125 * color(xyz.xy * 8.0 - 3.0 * step);\n   // n += 0.0625 * color(xyz.xy * 16.0 - 4.0 * step);\n   // n += 0.03125 * color(xyz.xy * 32.0 - 5.0 * step);\n\n   vec3 purpleColor = vec3(137.0,117.0,165.0)/255.0;\n   vec3 blueColor = vec3(151.0, 195.0, 233.0)/255.0;\n   vec3 black = vec3(1.0);\n   float yy = 0.5+0.5*n > 0.5 ? 1.0:0.0;\n   // vec3 tarColor = uColor0/255.0;\n   // vec3 tarColor = vec3(1.0);\n   // vec3 tarColor = vec3(255.0,239.0,239.0)/255.0;\n   vec3 tarColor = uLowColor;\n   float x = 0.5+0.5*n;\n   // if(x>=0.2&&x<=0.5)\n   // {\n   //   // float intensity = smoothstep(0.4,0.5,x);\n   //   tarColor = mix(uHighColor,uLowColor,smoothstep(0.2,0.5,x)); \n   // }\n   // else if(x>=0.0 &&x<=0.2){\n   //   tarColor = mix(uLowColor,vec3(1.0),smoothstep(0.0,0.2,x));\n   // }\n   float intensity = texture(uDisplacementTexture,vUv).r;\n   \n   if(x>=0.5){\n     tarColor = mix(uLowColor,uHighColor,smoothstep(0.4,1.0,x)); \n   }\n   if(intensity != 0.0){\n     tarColor = mix(tarColor,uLowColor,smoothstep(0.2,0.8,intensity));\n   }\n   // else{\n   //  \n   //   tarColor = intensity * tarColor;\n   // }\n   // if( x > 0.9){\n   //   tarColor = uColor1;\n   // }\n   // else if (x>0.8 && x<=0.9){\n   //   tarColor = uColor2;\n   // }\n   // else if(x>0.7 && x<=0.8){\n   //   tarColor = uColor3;\n   // }\n   // else if(x>0.6 && x<=0.7){\n   //   tarColor = uColor4;\n   // }\n   // else if(x>0.5 && x<=0.6){\n   //   tarColor = uColor5;\n   // }\n   // else if( x>0.4 && x<=0.5){\n   //   tarColor = uColor6;\n   // }\n   // else if(x>0.3 && x<=0.4){\n   //   tarColor = uColor7;\n   // }\n   // else if(x>0.2 && x<=0.3){\n   //   tarColor = uColor8;\n   // }\n   // else if(x>0.1 && x<=0.2){\n   //   tarColor = uColor9;\n   // }\n   // else if(x<=0.1){\n   //   tarColor = uColor10;\n   // }\n   // else if(0.5+0.5*n > 0.35){\n   //   tarColor = vec4(uLowColor,1.0);\n   // }\n   // vec3 tarColor = mix(black,color,yy);\n  // 0.5 + 0.5 * vec3(n, n, n)\n   gl_FragColor = vec4(tarColor,0.9);\n\n}\n";
var _default = Perlin;
exports["default"] = _default;
//# sourceMappingURL=perlin.dev.js.map
