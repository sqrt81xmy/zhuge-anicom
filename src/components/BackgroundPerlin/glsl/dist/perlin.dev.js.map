{"version":3,"sources":["perlin.js"],"names":["Perlin"],"mappings":";;;;;;AAAA,IAAMA,MAAM,GACZ,mBACA,4BADA,GAEA,UAFA;AAEY;AAFZ,0kQADA;eA8QeA,M","sourcesContent":["const Perlin =\r\n'#ifdef GL_ES\\n'+\r\n'precision mediump float;\\n' +\r\n'#endif\\n'+ /*glsl*/` \r\n//\r\n// GLSL textureless classic 3D noise \"cnoise\",\r\n// with an RSL-style periodic variant \"pnoise\".\r\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\r\n// Version: 2024-11-07\r\n//\r\n// Many thanks to Ian McEwan of Ashima Arts for the\r\n// ideas for permutation and gradient selection.\r\n//\r\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\r\n// Distributed under the MIT license. See LICENSE file.\r\n// https://github.com/stegu/webgl-noise\r\n//\r\n\r\nvarying vec2 vUv;//receive variable from vertex\r\nuniform float uTime;\r\nuniform vec3 uHighColor;\r\nuniform vec3 uLowColor; \r\nuniform vec3 uColor1;\r\nuniform vec3 uColor2;\r\nuniform vec3 uColor3;\r\nuniform vec3 uColor4;\r\nuniform vec3 uColor5;\r\nuniform vec3 uColor6;\r\nuniform vec3 uColor7;\r\nuniform vec3 uColor8;\r\nuniform vec3 uColor9;\r\nuniform vec3 uColor10;\r\nuniform vec3 uColor0;\r\nuniform sampler2D uDisplacementTexture;\r\n\r\n\r\nvec3 mod289(vec3 x)\r\n{\r\n return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nvec4 mod289(vec4 x)\r\n{\r\n return x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nvec4 permute(vec4 x)\r\n{\r\n return mod289(((x*34.0)+10.0)*x);\r\n}\r\n\r\nvec4 taylorInvSqrt(vec4 r)\r\n{\r\n return 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nvec3 fade(vec3 t) {\r\n return t*t*t*(t*(t*6.0-15.0)+10.0);\r\n}\r\n\r\n// Classic Perlin noise\r\nfloat cnoise(vec3 P)\r\n{\r\n vec3 Pi0 = floor(P); // Integer part for indexing\r\n vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\r\n Pi0 = mod289(Pi0);\r\n Pi1 = mod289(Pi1);\r\n vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n vec4 iz0 = Pi0.zzzz;\r\n vec4 iz1 = Pi1.zzzz;\r\n\r\n vec4 ixy = permute(permute(ix) + iy);\r\n vec4 ixy0 = permute(ixy + iz0);\r\n vec4 ixy1 = permute(ixy + iz1);\r\n\r\n vec4 gx0 = ixy0 * (1.0 / 7.0);\r\n vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r\n gx0 = fract(gx0);\r\n vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n vec4 sz0 = step(gz0, vec4(0.0));\r\n gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n vec4 gx1 = ixy1 * (1.0 / 7.0);\r\n vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r\n gx1 = fract(gx1);\r\n vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n vec4 sz1 = step(gz1, vec4(0.0));\r\n gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n\r\n float n000 = norm0.x * dot(g000, Pf0);\r\n float n010 = norm0.y * dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n float n100 = norm0.z * dot(g100, vec3(Pf1.x, Pf0.yz));\r\n float n110 = norm0.w * dot(g110, vec3(Pf1.xy, Pf0.z));\r\n float n001 = norm1.x * dot(g001, vec3(Pf0.xy, Pf1.z));\r\n float n011 = norm1.y * dot(g011, vec3(Pf0.x, Pf1.yz));\r\n float n101 = norm1.z * dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n float n111 = norm1.w * dot(g111, Pf1);\r\n\r\n vec3 fade_xyz = fade(Pf0);\r\n vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \r\n return 2.2 * n_xyz;\r\n}\r\n\r\n// Classic Perlin noise, periodic variant\r\nfloat pnoise(vec3 P, vec3 rep)\r\n{\r\n vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\r\n vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\r\n Pi0 = mod289(Pi0);\r\n Pi1 = mod289(Pi1);\r\n vec3 Pf0 = fract(P); // Fractional part for interpolation\r\n vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\r\n vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\r\n vec4 iy = vec4(Pi0.yy, Pi1.yy);\r\n vec4 iz0 = Pi0.zzzz;\r\n vec4 iz1 = Pi1.zzzz;\r\n\r\n vec4 ixy = permute(permute(ix) + iy);\r\n vec4 ixy0 = permute(ixy + iz0);\r\n vec4 ixy1 = permute(ixy + iz1);\r\n\r\n vec4 gx0 = ixy0 * (1.0 / 7.0);\r\n vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\r\n gx0 = fract(gx0);\r\n vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\r\n vec4 sz0 = step(gz0, vec4(0.0));\r\n gx0 -= sz0 * (step(0.0, gx0) - 0.5);\r\n gy0 -= sz0 * (step(0.0, gy0) - 0.5);\r\n\r\n vec4 gx1 = ixy1 * (1.0 / 7.0);\r\n vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\r\n gx1 = fract(gx1);\r\n vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\r\n vec4 sz1 = step(gz1, vec4(0.0));\r\n gx1 -= sz1 * (step(0.0, gx1) - 0.5);\r\n gy1 -= sz1 * (step(0.0, gy1) - 0.5);\r\n\r\n vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\r\n vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\r\n vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\r\n vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\r\n vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\r\n vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\r\n vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\r\n vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\r\n\r\n vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\r\n vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\r\n\r\n float n000 = norm0.x * dot(g000, Pf0);\r\n float n010 = norm0.y * dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\r\n float n100 = norm0.z * dot(g100, vec3(Pf1.x, Pf0.yz));\r\n float n110 = norm0.w * dot(g110, vec3(Pf1.xy, Pf0.z));\r\n float n001 = norm1.x * dot(g001, vec3(Pf0.xy, Pf1.z));\r\n float n011 = norm1.y * dot(g011, vec3(Pf0.x, Pf1.yz));\r\n float n101 = norm1.z * dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\r\n float n111 = norm1.w * dot(g111, Pf1);\r\n\r\n vec3 fade_xyz = fade(Pf0);\r\n vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\r\n vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\r\n float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \r\n return 2.2 * n_xyz;\r\n}\r\n\r\n// demo code:\r\nfloat color(vec2 xy) {\r\n   float iTime = uTime;\r\n  return cnoise(vec3(1.5*xy, 0.3*iTime)); }\r\nvoid main() {\r\n   vec2 p = (vUv.xy) * 2.0 - 1.0;\r\n\r\n   vec3 xyz = vec3(p, 0);\r\n\r\n   vec2 step = vec2(1.3, 1.7);\r\n   float n = color(xyz.xy);\r\n   n += 0.5 * color(xyz.xy * 2.0 - step);\r\n   // n += 0.25 * color(xyz.xy * 4.0 - 2.0 * step);\r\n   // n += 0.125 * color(xyz.xy * 8.0 - 3.0 * step);\r\n   // n += 0.0625 * color(xyz.xy * 16.0 - 4.0 * step);\r\n   // n += 0.03125 * color(xyz.xy * 32.0 - 5.0 * step);\r\n\r\n   vec3 purpleColor = vec3(137.0,117.0,165.0)/255.0;\r\n   vec3 blueColor = vec3(151.0, 195.0, 233.0)/255.0;\r\n   vec3 black = vec3(1.0);\r\n   float yy = 0.5+0.5*n > 0.5 ? 1.0:0.0;\r\n   // vec3 tarColor = uColor0/255.0;\r\n   // vec3 tarColor = vec3(1.0);\r\n   // vec3 tarColor = vec3(255.0,239.0,239.0)/255.0;\r\n   vec3 tarColor = uLowColor;\r\n   float x = 0.5+0.5*n;\r\n   // if(x>=0.2&&x<=0.5)\r\n   // {\r\n   //   // float intensity = smoothstep(0.4,0.5,x);\r\n   //   tarColor = mix(uHighColor,uLowColor,smoothstep(0.2,0.5,x)); \r\n   // }\r\n   // else if(x>=0.0 &&x<=0.2){\r\n   //   tarColor = mix(uLowColor,vec3(1.0),smoothstep(0.0,0.2,x));\r\n   // }\r\n   float intensity = texture(uDisplacementTexture,vUv).r;\r\n   \r\n   if(x>=0.5){\r\n     tarColor = mix(uLowColor,uHighColor,smoothstep(0.4,1.0,x)); \r\n   }\r\n   if(intensity != 0.0){\r\n     tarColor = mix(tarColor,uLowColor,smoothstep(0.2,0.8,intensity));\r\n   }\r\n   // else{\r\n   //  \r\n   //   tarColor = intensity * tarColor;\r\n   // }\r\n   // if( x > 0.9){\r\n   //   tarColor = uColor1;\r\n   // }\r\n   // else if (x>0.8 && x<=0.9){\r\n   //   tarColor = uColor2;\r\n   // }\r\n   // else if(x>0.7 && x<=0.8){\r\n   //   tarColor = uColor3;\r\n   // }\r\n   // else if(x>0.6 && x<=0.7){\r\n   //   tarColor = uColor4;\r\n   // }\r\n   // else if(x>0.5 && x<=0.6){\r\n   //   tarColor = uColor5;\r\n   // }\r\n   // else if( x>0.4 && x<=0.5){\r\n   //   tarColor = uColor6;\r\n   // }\r\n   // else if(x>0.3 && x<=0.4){\r\n   //   tarColor = uColor7;\r\n   // }\r\n   // else if(x>0.2 && x<=0.3){\r\n   //   tarColor = uColor8;\r\n   // }\r\n   // else if(x>0.1 && x<=0.2){\r\n   //   tarColor = uColor9;\r\n   // }\r\n   // else if(x<=0.1){\r\n   //   tarColor = uColor10;\r\n   // }\r\n   // else if(0.5+0.5*n > 0.35){\r\n   //   tarColor = vec4(uLowColor,1.0);\r\n   // }\r\n   // vec3 tarColor = mix(black,color,yy);\r\n  // 0.5 + 0.5 * vec3(n, n, n)\r\n   gl_FragColor = vec4(tarColor,0.9);\r\n\r\n}\r\n`\r\n\r\nexport default Perlin;"],"file":"perlin.dev.js"}