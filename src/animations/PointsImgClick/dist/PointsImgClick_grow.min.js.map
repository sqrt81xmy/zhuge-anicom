{"version":3,"sources":["PointsImgClick_grow.js"],"names":["_react","require","_three","_gsapTrial","usePointsImgClick_grow","_useState2","_slicedToArray","useState","position","x","y","pointsImgRef","current","scale","pointsNum","state","setState","_useState4","click","setClick","useEffect","pointsRef","getPointsRef","geometryRef","getGeometryRef","uTimeRef","getUTimeRef","gsap","to","z","duration","fduration","setTimeout","geometry","value","delayedCall","_construct","PlaneGeometry","concat","_toConsumableArray","dispose","console","log","_ref"],"mappings":"2FAAA,IAAAA,OAAAC,QAAA,SACAC,OAAAD,QAAA,SACAE,WAAAF,QAAA,4rDAEA,SAASG,yBAAyB,IAAAC,EAAAC,gBACL,EAAAN,OAAAO,UAAS,CAC9BC,SAAS,CAACC,EAAE,KAAKC,EAAE,MAN3BC,aAAA,CAAAC,QAAA,MAQQC,MAAM,CAACJ,EAAE,KAAKC,EAAE,MAPxBI,UAAA,OAGkC,GACvBC,EADuBV,EAAA,GACjBW,EADiBX,EAAA,GAAAY,EAAAX,gBAFlC,EAAAN,OAAAO,UAAA,GAEkC,GAFlCW,EAEkCD,EAAA,GAFlCE,EAEkCF,EAAA,IAQ9B,EAAAjB,OAAAoB,WAAU,WACN,GAAY,GAATF,EAAW,CAGV,IAAMG,EAAYN,EAAMJ,aAAaC,QAAQU,eACvCC,EAAcR,EAAMJ,aAAaC,QAAQY,iBACzCC,EAAWV,EAAMJ,aAAaC,QAAQc,cAE5CC,WAAAA,KAAKC,GAAGP,EAAUT,QAAQJ,SACtB,CAAGC,EAAGM,EAAMP,SAASC,EAAGC,EAAEK,EAAMP,SAASE,EAAGmB,EAAE,EAC1CC,SAAUC,KAIlBC,WAAW,WAtBW,IAAAC,EAuBlBN,WAAAA,KAAKC,GAAGH,EAASb,QACjB,CACIsB,MAAOJ,GAAcA,SAASA,KAElCH,WAAAA,KAAKQ,YAAYL,GAAiB,WAC9BH,WAAAA,KAAKC,GAAGH,EAASb,QACjB,CACIsB,MAAO,EA9BtB9B,SAAyB0B,OAEjBf,EAAAF,MAAAJ,EAAUkB,WAAAA,KAAAC,GAAAP,EAAAT,QAAAC,MADW,CAEjBJ,EAAA,IAAA,KAAAC,EAAA,OAASoB,SAAA,MACNH,WAAAA,KAAAC,GAAAP,EAAAT,QAAAC,MAHc,CAInBJ,EAAAM,EAAAF,MAAAJ,EAAAC,EAAAK,EAAAF,MAAAH,EALeoB,SAAA,MAAAG,EAAAlB,EAAAD,UAAAsB,WAAAC,OAAAA,cAAA,CAAA,EAAA,GAAAC,OAAAC,mBAAAxB,EAAAD,aAiDH,IAAIuB,OAAAA,cAAc,EAAE,EAAE,IAAI,KAjDvBhB,EAAAT,QAAAqB,SAAAO,UAsDlBnB,EAAUT,QAAQqB,SAAWA,EA9CzCV,EAAUX,QAAIqB,EACFQ,QAAMC,IAAA,aAAAnB,EAAAX,UAMQ,OAHlB,CAAAM,IAWIS,OATkB,SAAAgB,GAAtB,IAAuBhC,EAAvBgC,EAAuBhC,aAAaC,EAApC+B,EAAoC/B,SAAQc,EAA5CiB,EAA4CjB,MAAAA,EAA5CiB,EAA4CjB,UAC5Ce,QAAMV,IAASb,GAAOC,EAAA,SAAAD,GAiDtB,OAAQA,IA/CDT,EAASD,WAAcO,MAAMP,CAAhCA,SAAAA,EACYK,MAAEkB,EAFlBjB,UAAAA,EAuDIH,aAAgBA,mBAhDhBP","file":"PointsImgClick_grow.min.js","sourcesContent":["import { useState,useEffect } from \"react\";\r\nimport { PlaneGeometry } from \"three\";\r\nimport { gsap } from \"gsap-trial\";\r\n\r\nfunction usePointsImgClick_grow() {\r\n    const [state,setState] = useState({\r\n        position:{x:null,y:null},\r\n        pointsImgRef:{current:null},\r\n        scale:{x:null,y:null},\r\n        pointsNum: null\r\n    })\r\n    const [click,setClick] = useState(0); \r\n    useEffect(()=>{\r\n        if(click == 1){\r\n                // click = 1;\r\n            // materialRef.current.uniforms.uScrollNoSin.value = 0.0; \r\n            const pointsRef = state.pointsImgRef.current.getPointsRef();\r\n            const geometryRef = state.pointsImgRef.current.getGeometryRef(); \r\n            const uTimeRef = state.pointsImgRef.current.getUTimeRef();\r\n            const fduration = 600;;\r\n            gsap.to(pointsRef.current.position, \r\n                {  x: state.position.x, y:state.position.y, z:0,\r\n                    duration: fduration/1000 \r\n                }); \r\n            const duration = 800; \r\n            //然后放大\r\n            setTimeout(()=>{  \r\n                gsap.to(uTimeRef.current,\r\n                {\r\n                    value: duration/1000,duration:duration/1000, \r\n                })\r\n                gsap.delayedCall(duration / 1000, () => {\r\n                    gsap.to(uTimeRef.current, \r\n                    {\r\n                        value: 0.0,\r\n                        duration: duration / 1000, \r\n                    });\r\n                }); \r\n                if(state.scale.x){\r\n                    gsap.to(pointsRef.current.scale,\r\n                        {\r\n                            x:1.6*1.15, y:1.2*1.1*1.04,\r\n                            duration:2*duration/1000\r\n                        }) \r\n                }\r\n                else\r\n                    gsap.to(pointsRef.current.scale,\r\n                    {\r\n                        x: state.scale.x, y: state.scale.y,\r\n                        duration:2*duration/1000\r\n                    }) \r\n                let geometry;\r\n                if(!state.pointsNum)\r\n                    geometry = new PlaneGeometry(1,1,400,400);\r\n                else\r\n                    geometry = new PlaneGeometry(1,1,...state.pointsNum);\r\n                    \r\n                pointsRef.current.geometry.dispose(); // 清理旧的几何体\r\n                pointsRef.current.geometry = geometry; // 更新几何体\r\n                geometryRef.current = geometry;\r\n                console.log(\"widthwidth\",geometryRef.current)\r\n            },fduration) \r\n        }\r\n    },[click])\r\n\r\n    const handleOnClick = ({pointsImgRef,position,scale,pointsNum})=>{\r\n        console.log(click)\r\n        setClick((click)=>{\r\n            return !click;\r\n        })\r\n        setState(()=>{\r\n            return {\r\n                'position': position,\r\n                'scale':scale,\r\n                'pointsNum': pointsNum,\r\n                'pointsImgRef': pointsImgRef\r\n            }\r\n        })\r\n    } \r\n    return handleOnClick\r\n}\r\n\r\nexport default usePointsImgClick_grow\r\n"]}