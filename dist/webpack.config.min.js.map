{"version":3,"sources":["webpack.config.js"],"names":["path","require","module","exports","mode","entry","resolve","__dirname","alias","output","filename","libraryTarget","test","exclude","use","loader","options","type","generator","url","externals","react"],"mappings":"aAAA,IAAMA,KAAOC,QAAQ,QAArBC,OAAMF,QAAOC,CAEbC,MAAOC,iBACLC,KAAA,aACAC,QAAO,CACPD,MAAM,CACNE,MAASN,KAAAM,QAAAC,UAAA,sBACPC,YAAOR,KAAAM,QAAAC,UAAA,4BADAE,OAJM,CAYbC,SAAA,WAEAA,KAAAA,KAAUJ,QAAAC,UAHJ,SAKNP,cAAWM,aAEXK,OAAAA,CAEFT,MAAQ,CACN,CAGIU,KAAA,YAEAC,QAAA,uBAEAC,IAAA,CAEEC,OAAA,eAEAC,QAAA,CACAA,QAAS,CAAA,oBAAA,0BAMb,CACEJ,KAAM,0BACNK,KAAM,iBACNC,UAAW,CACPR,SAAU,uBAiBd,CAGAE,KAAA,SAIII,IAAAA,CAAAA,eACIG,CADKJ,OAAA,aAHRC,QAAA,CA1CFG,KAAA,QAsDTC,UAAW,CACTC,MAAS","file":"webpack.config.min.js","sourcesContent":["const path = require('path');\r\n \r\nmodule.exports = {\r\n  //编译的输入位置,是在项目目录下的src目录下的index.jsx,如果你使用纯js编写,那这个文件名当然就是index.js\r\n  entry: './src/index.js',\r\n  mode: 'production',\r\n  resolve: {\r\n    alias: {\r\n      react: path.resolve(__dirname, 'node_modules/react'),\r\n      'react-dom': path.resolve(__dirname, 'node_modules/react-dom')\r\n    }\r\n  },\r\n  //编译的输出设置\r\n  output: {\r\n    //编译后的入口文件(别人用你的包的时候,引用的文件的名字,一般都是index.js\r\n    //这样引用你的包的时候,直接就是 import MyComponent from 'my-component/build'就自动会定位到index.js.\r\n    filename: 'index.js',\r\n    //编译后的文件将被输出到哪个文件夹下 这里是当前项目目录下的build里面\r\n    path: path.resolve(__dirname, 'build'),\r\n    //意思是把我们的输出作为react组件\r\n    libraryTarget: 'commonjs2'\r\n  },\r\n  module: {\r\n    //简单理解为:在编译过程中遇到什么文件用什么工具/模块 来处理/编译 按照这样写即可.如果是ts编写,你还需要安装更多的组件.\r\n    rules: [\r\n      {\r\n        //编译时找js或者jsx的文件\r\n        test: /\\.js|jsx$/,\r\n        //不包含您这些文件夹/在遇到这些文件夹的时候,跳过.我们这里写了build是因为你编译过后的文件会在build文件夹里面,而编译过的文件你不能也不需要再编译了.\r\n        exclude: /(node_modules|build)/,\r\n        //当符合这样的文件格式和文件夹条件的时候,使用下面的编译组件和设置\r\n        use: {\r\n          //使用babel-loader\r\n          loader: 'babel-loader',\r\n          //使用babel-loader时候的设置\r\n          options: {\r\n            presets: ['@babel/preset-env', '@babel/preset-react']\r\n          }\r\n        }\r\n      },\r\n      // 新增图片文件处理规则\r\n      {\r\n        test: /\\.(png|jpe?g|gif|svg)$/i,\r\n        type: 'asset/resource',\r\n        generator: {\r\n            filename: 'images/[name][ext]'\r\n        } \r\n        // use: [\r\n        //   {\r\n        //     loader: 'url-loader', // 优先用 url-loader\r\n        //     options: {\r\n        //       limit: 8192, // 小于 8KB 的文件转为 base64\r\n        //       name: '[name].[hash:8].[ext]', // 输出文件名格式\r\n        //       outputPath: 'images/', // 输出到 build/images 目录\r\n        //       publicPath: 'images/', // 引用路径前缀\r\n        //       esModule: false // 避免与 React 的 ES Module 冲突\r\n        //     }\r\n        //   }\r\n        // ],\r\n        // type: 'asset'\r\n      },\r\n      {\r\n        //遇到css文件的时候\r\n        test: /\\.css$/,\r\n        \r\n        //使用style-loader和css-loader处理\r\n        use: ['style-loader', \r\n        {\r\n            'loader':'css-loader',\r\n            options: {\r\n                url: false\r\n              }\r\n        }],\r\n       \r\n      },\r\n    ]\r\n  },\r\n  //要排除哪些模块不打包呢?这个参数我不是很清楚,但是学来的时候就这样的,具体因为时间的原因我也没有测试.\r\n  externals: {\r\n    'react': 'commonjs react'\r\n  }\r\n};"]}